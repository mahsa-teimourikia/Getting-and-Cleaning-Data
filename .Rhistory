authenticate("user","passwd"))
pg2
pg2 = GET("http://httpbin.org/basic-auth/user/passwd",
authenticate("user","passwd"))
pg2
names(pg2)
## Using handles
google = handle("http://google.com")
pg1 = GET(handle = google, path="/")
pg2 = GET(handle = google, path="search")
## Accessing twitter from R
myapp = oauth_app("twitter",
key = "MU8q8BHy5EOboibo2ceEx8que",
secret = "6tT1a0YwUMC0WvQklhKlNjRqfqUlQ5xn8JcSask5OBcPvTKxuD")
sig = sign_oauth1.0(myapp,
token = "298558989-zOSl3vKMjL6PZymZYB76MyoVhHjBQO5dkFw4dwrD",
token_secret = "oHIGHtoRwub6PZcRvwOUKebQh12eHAgUHdorhbF9Tjg3J")
## Converting the json object
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1, 1:4]
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
## Converting the json object
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1, 1:4]
install.packages("jsonLite")
install.packages("jsonlite")
install.packages("jsonlite")
library(jsonlite)
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1, 1:4]
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1, 1:4]
?oauth_app
## installing the httr package
install.packages("httr")
## installing httpuv
install.packages("httpuv")
## installing jasonlite
install.packages("jsonlite")
## using the packages
library(httr)
library(httpuv)
library(jsonLite)
## Connecting to github API
myapp = oauth_app("github",
key = "7c339d122671c8d52191",
secret = "0cc995e6afa05e5599e9447e2646c64afe3013d5")
github_token = oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httr")
install.packages("jsonlite")
install.packages("httr")
install.packages("httr")
install.packages("httr")
library(httr)
library(httpuv)
library(jsonlite)
## Connecting to github API
myapp = oauth_app("github",
key = "7c339d122671c8d52191",
secret = "0cc995e6afa05e5599e9447e2646c64afe3013d5")
github_token = oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
oauth_endpoints("github")
## Connecting to github API
myapp <- oauth_app("github",
key = "7c339d122671c8d52191",
secret = "0cc995e6afa05e5599e9447e2646c64afe3013d5")
#  Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use the API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
library(jsonLite)
library(jsonlite)
library(jsonlite)
install.packages("jsonlite")
library(jsonlite)
stop_for_status(req)
content(req)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
oauth_endpoints("github")
## Connecting to github API
myapp <- oauth_app("github",
key = "7c339d122671c8d52191",
secret = "7da1909dc7f087e70f181ac91b6c71f6a5745ff0")
#  Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use the API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
## using the packages
library(httr)
library(httpuv)
library(jsonlite)
#    Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
## Connecting to github API
myapp <- oauth_app("github",
key = "65c46ad93f470e8b6dd7",
secret = "257b085583de92f638a99a680e455379bc6e69a0")
#  Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use the API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
oauth_endpoints("github")
## Connecting to github API
myapp <- oauth_app("github",
key = "65c46ad93f470e8b6dd7",
secret = "257b085583de92f638a99a680e455379bc6e69a0")
sig = sign_oauth1.0(myapp,
token = "7fb926982598e5e0beed8b98d947ede2c81b6a9a")
#  Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), sig)
# Use the API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
sig
github_token
demo("oauth2-github", package = "httr", ask = FALSE)
library(httpuv)
install.packages("httpuv")
library(httpuv)
demo("oauth2-github", package = "httr", ask = FALSE)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github", "65c46ad93f470e8b6dd7")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
## using the packages
library(httr)
library(httpuv)
library(jsonlite)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github", "65c46ad93f470e8b6dd7", "257b085583de92f638a99a680e455379bc6e69a0")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
content(req)
## using the packages
library(httr)
library(httpuv)
library(jsonlite)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github", "65c46ad93f470e8b6dd7", "d635a47634f4da1a194a623e9e05b4f9c0c4482e")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
content(req)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github", key = "65c46ad93f470e8b6dd7", secret = "d635a47634f4da1a194a623e9e05b4f9c0c4482e")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
content(req)
library(httr)
library(httpuv)
library(jsonlite)
library(httr)
library(httpuv)
library(jsonlite)
oauth_endpoints("github")
myapp <- oauth_app("github", key = "65c46ad93f470e8b6dd7", secret = "d937559927d6da1006c33dcb5df59413a2e0d4ba")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp <- oauth_app("github", key = "65c46ad93f470e8b6dd7", secret = "d937559927d6da1006c33dcb5df59413a2e0d4ba")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
## using the packages
library(httr)
library(httpuv)
library(jsonlite)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github", key = "65c46ad93f470e8b6dd7", secret = "d937559927d6da1006c33dcb5df59413a2e0d4ba")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
?oauth2.0_token
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, use_basic_auth = TRUE)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, use_basic_auth = FALSE)
github_token <- oauth1.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth1.0_token(myapp)
library(httr)
library(httpuv)
library(jsonlite)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github", key = "f1c4097cf04b11024d4e", secret = "cf4059f9f2d733e1f1b0d4bdae789b25fba993b7")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
library(httr)
require(httpuv)
require(jsonlite)
# 1. Find OAuth settings for github: http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
# Insert your values below - if secret is omitted, it will look it up in the
# GITHUB_CONSUMER_SECRET environmental variable.  Use http://localhost:1410
# as the callback url
myapp <- oauth_app("quiz2", "ddb0d599de51ccd02f4b", secret = "6af1109f6ecf442d292425087d49bb13d9bbe9c8")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
require(httpuv)
require(jsonlite)
# 1. Find OAuth settings for github: http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
# Insert your values below - if secret is omitted, it will look it up in the
# GITHUB_CONSUMER_SECRET environmental variable.  Use http://localhost:1410
# as the callback url
myapp <- oauth_app("quiz2", "f1c4097cf04b11024d4e", secret = "cf4059f9f2d733e1f1b0d4bdae789b25fba993b7")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
require(httpuv)
require(jsonlite)
# 1. Find OAuth settings for github: http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
# Insert your values below - if secret is omitted, it will look it up in the
# GITHUB_CONSUMER_SECRET environmental variable.  Use http://localhost:1410
# as the callback url
myapp <- oauth_app("quiz2", "f1c4097cf04b11024d4e", secret = "cf4059f9f2d733e1f1b0d4bdae789b25fba993b7")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
output <- content(req)
list(output[[4]]$name, output[[4]]$created_at)
output
names(output)
class(output)
list(output[[4]]$name, output[[4]]$created_at)
list(output[[1]]$name, output[[1]]$created_at)
list(output[[2]]$name, output[[2]]$created_at)
list(output[[3]]$name, output[[3]]$created_at)
list(output[[5]]$name, output[[5]]$created_at)
output[[6]]$name
output[[6]]$name
which(sapply(output, FUN = function(X) "datasharing" %in% X))
list(output[[8]]$name, output[[8]]$created_at)
dsh_index <- which(sapply(output, FUN = function(X) "datasharing" %in% X))
list(output[[dsh_index]]$name, output[[dsh_index]]$created_at)
install.packages("sqldf")
library(sqldf)
## Downloading the data
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
f <- file.path(getwd(), "Fss06pid.csv")
acs <- data.table(read.csv(f))
library(data.table)
acs <- data.table(read.csv(f))
file.create(f)
acs <- data.table(read.csv(f))
download.file(url,f)
## reading the file into a data frame
acs <- data.table(read.csv(f))
sqldf("select * from acs where AGEP < 50")
query1 <- sqldf("select * from acs where AGEP < 50")
query2 <- sqldf("select pwgtp1 from acs")
query3 <- sqldf("select pwgtp1 from acs where AGEP < 50")
query4 <- sqldf("select * from acs")
query3
unique(acs$AGEP)
forth <- sqldf("select distinct pwgtp1 from acs")
result <- unique(acs$AGEP)
first <- sqldf("select distinct AGEP from acs")
second <- sqldf("select AGEP where unique from acs")
third <- sqldf("select unique * from acs")
forth <- sqldf("select distinct pwgtp1 from acs")
identical(result, first)
identical(result, second)
identical(result, third)
identical(result, forth)
class(result)
class(first)
result <- data.frame(matrix(unlist(res), nrow = 91, byrow = T))
res <- unique(acs$AGEP)
result <- data.frame(matrix(unlist(res), nrow = 91, byrow = T))
identical(result, first)
identical(result, forth)
result
head(result)
head(first)
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
close(con)
nchar(htmlCode[10])
nchar(htmlCode[10])
nchar(htmlCode[20])
nchar(htmlCode[30])
nchar(htmlCode[100])
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
lines <- readLines(url, n=10)
lines <- readLines(url, n=10, setInternet2(TRUE))
lines <- readLines(url, n=10, setInternet2=TRUE)
?file
?url
dara  <- read.table(url,header = TRUE, sep = "\t")
setInternet2(TRUE)
dara  <- read.table(url,header = TRUE, sep = "\t")
library(RCurl)
getURL("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
url <- getURL("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
dara  <- read.table(url,header = TRUE, sep = "\t")
dara  <- read.csv(text= url,header = TRUE, sep = "\t")
data  <- read.csv(text= url,header = TRUE, sep = "\t")
head(data)
d[,4]
data[,4]
data[4]
data[[4]]
colSums(data)
head(data)
data  <- read.csv(text= url,header = FALSE, sep = "\t")
head(data)
data$V1
sum(data[nino3])
data  <- read.csv(text= url,header = TRUE, sep = "\t")
data  <- read.csv(text= url,header = TRUE, sep = "\t", skip = 1)
head(data)
data  <- read.csv(text= url,header = TRUE, sep = "\t", skip = 2)
head(data)
data$SSTA
data  <- read.csv(text= url, sep = "\t", skip = 2)
head(data)
data  <- read.csv(text= url, sep = "\t", skip = 10)
data
head(data)
data  <- read.csv(text= url,header = TRUE, sep = "\t", skip = 1)
class(data)
data[[4]]
data[[2]]
head(data)
data  <- read.csv(text= url, sep = "\t", skip = 10)
data[[2]]
data[[1]]
data  <- read.table(text= url, sep = "\t")
head(data)
data[[1]]
data  <- as.matrix(read.table(text= url,header = TRUE, sep = "\t"))
data  <- as.matrix(read.table(text= url,  sep = "\t"))
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
lines <- readLines(url, n=10)
w <- c(1, 9, 5, 4, 1, 3, 5, 4, 1, 3, 5, 4, 1, 3, 5, 4, 1, 3)
colNames <- c("filler", "week", "filler", "sstNino12", "filler", "sstaNino12", "filler", "sstNino3", "filler", "sstaNino3", "filler", "sstNino34", "filler", "sstaNino34", "filler", "sstNino4", "filler", "sstaNino4")
d <- read.fwf(url, w, header=FALSE, skip=4, col.names=colNames)
d <- d[, grep("^[^filler]", names(d))]
sum(d[, 4])
library(foreign)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
download.file(fileUrl, destfile = "wks.xpt", method = "curl")
dateDownloaded <- date()
wksData<-read.fwf("./wks.xpt",skip=4,widths=c(12, 7,4, 9,4, 9,4, 9,4))
sum(wksData[4])
library(foreign)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
dateDownloaded <- date()
library(foreign)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
data <- read.fwf(file= fileUrl,
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
library(foreign)
fileUrl <- "http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"
data <- read.fwf(file= fileUrl,
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
head(data)
sum(data[4])
data <- read.fwf(file= fileUrl,
skip=2,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
head(data)
sum(data[4]) + sum(data[9])
sum(data[4])
data <- read.fwf(file= fileUrl,
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
sum(data[4])
sum(data[9])
sum(data[4]) +sum(data[9])
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
f <- file.path(getwd(), "q2.xpt")
download.file(fileUrl, destfile = f, method = "curl")
download.file(fileUrl, destfile = f)
data <- read.fwf(file= f,
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
sum(data[4]) +sum(data[9])
head(data)
widths=c(12, 7,4, 9,4, 9,4, 9,4))
data <- read.fwf(file= f,
skip=3,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
head(data)
data <- read.fwf(file= f,
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
sum(data[4]) +sum(data[9])
getwd()
setwd("C:/Users/Teimourikia/Desktop/Data Science/Getting and Cleaning Data/WorkingDir")
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile = "./data/cameras.csv", method = "curl")
download.file(fileUrl, destfile = "./data/cameras.csv")
cameraData <- read.csv("./data/cameras.csv")
names(cameraData)
tolower(names(cameraData))
splitNames <- strsplit(names(cameraData), "\\.")
splitNames[[5]]
splitNames[[6]]
splitNames[[6]][1]
firstElement <- function(x){x[1]}
sapply(splitNames, firstElement)
fileUrl1 <- "https://dl.dropboxusercontent.com/u/7710864/data/reviews-apr29.csv"
fileUrl2 <- "https://dl.dropboxusercontent.com/u/7710864/data/solutions-apr29.csv"
download.file(fileUrl1, destfile = "./data/reviews.csv")
download.file(fileUrl2, destfile = "./data/solutions.csv")
reviews <- read.csv("./data/reviews.csv")
solutions <- read.csv("./data/solutions.csv")
head(reviews, 2)
head(solutions, 2)
names(reviews)
sub("_","", names(reviews),)
testName <- "this_is_a_test"
sub("_","",testName)
gsub("_","",testName)
grep("Alameda", cameraData$intersection)
table(grepl("Alameda", cameraData$intersection))
cameraData2 <- cameraData[!grepl("Alameda", cameraData$intersection),]
grep("Alameda", cameraData$intersection, value = TRUE)
grep("JeffStreet", cameraData$intersection)
length(grep("JeffStreet", cameraData$intersection))
install.packages("stringr")
library(stringr)
nchar("Jeffrey Leek")
substr("Jeffrey Leek", 1, 7)
paste("Jeffrey", "Leek")
paste0("Mahsa", "Teimourikia")
paste0("Mahsa", "Teimourikia")
str_trim("Mahsa     ")
